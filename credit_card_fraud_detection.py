# -*- coding: utf-8 -*-
"""Credit Card Fraud Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pt8HgNkvOHsQuTOtdVj5wJp_9mr6p-Gq
"""

# Including libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from imblearn.over_sampling import SMOTE
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score

# Data Preprocessing and Data Cleaning

# Loading the dataset into a pandas dataframe
credit_Card_Data = pd.read_csv('/content/fraudTest.csv')

# Checking the first five rows of the dataset
credit_Card_Data.head()

# Checking the last five rows of the dataset
credit_Card_Data.tail()

# Data Information
credit_Card_Data.info()

# Checking the number of missing values in the data
credit_Card_Data.isnull().sum()

# Handling missing values
credit_Card_Data['unix_time'].fillna(credit_Card_Data['unix_time'].median(), inplace=True)
credit_Card_Data['merch_lat'].fillna(credit_Card_Data['merch_lat'].median(), inplace=True)
credit_Card_Data['merch_long'].fillna(credit_Card_Data['merch_long'].median(), inplace=True)
credit_Card_Data['is_fraud'].fillna(credit_Card_Data['is_fraud'].median(), inplace=True)

# Checking data again for missing values
credit_Card_Data.isnull().sum()

# Identify categorical columns
categorical_columns = credit_Card_Data.select_dtypes(include=['object']).columns.tolist()

# Initialize LabelEncoder
label_encoder = LabelEncoder()

# Apply label encoding to all categorical columns
for column in categorical_columns:
    credit_Card_Data[column] = label_encoder.fit_transform(credit_Card_Data[column])

# Handle imbalanced data with SMOTE
X = credit_Card_Data.drop(columns='is_fraud', axis=1)
y = credit_Card_Data['is_fraud']

smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Cross-validation with StratifiedKFold
cv = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)

# Initialize the classifier
classifier = RandomForestClassifier(n_estimators=100, random_state=42)

# Fit the classifier to the training data
classifier.fit(X_train, y_train)

# Make predictions on the test set
y_pred = classifier.predict(X_test)

# Evaluate the model on the test set
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred)

# Print evaluation metrics
print("Test Set Precision: {:.2f}".format(precision))
print("Test Set Recall: {:.2f}".format(recall))
print("Test Set F1 Score: {:.2f}".format(f1))
print("Test Set ROC AUC: {:.2f}".format(roc_auc))

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)

# Print the accuracy
print("Test Set Accuracy: {:.2f}%".format(accuracy * 100))